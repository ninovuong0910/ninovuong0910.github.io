{"version":3,"sources":["redux/actioncreators.js","components/Word.js","components/Form.js","components/Filter.js","components/List.js","redux/store.js","redux/words.reducer.js","redux/filtermode.reducer.js","redux/sholudshowform.reducer.js","App.js","serviceWorker.js","index.js"],"names":["url","toggleForm","type","addWord","word","removeWord","id","toggleWord","changeFilterMode","filterMode","setWords","dispatch","axios","get","then","res","words","data","toggleWordAsync","isMemorized","put","removeWordAsync","delete","addWordAsync","en","vn","post","w","Word","this","props","wordInfo","react_default","a","createElement","className","_this$props","key","_id","onClick","Component","mapDispatchToProps","connect","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtVn","txtEn","_this2","shoudShowForm","placeholder","value","onChange","evt","setState","target","disabled","style","width","margin","actioncreators","stateOnStore","Filter","List","filter","components_Form","components_Filter","getFilterMode","map","components_Word","onToggleWord","onRemoveWord","shouldShowForm","reducer","combineReducers","arguments","length","undefined","action","objectSpread","concat","store","createStore","applyMiddleware","thunk","App","es","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.966426bb.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://server2802.herokuapp.com/word';\n\nexport function toggleForm() {\n    return  {type: 'TOGGLE_FORM'}\n}\n\nexport function addWord(word) {\n    return {type: 'ADD_WORD', word}\n}\n\nexport function removeWord(id) {\n    return {type: 'REMOVE_WORD', id}\n}\n\nexport function toggleWord(id) {\n    return {type: 'TOGGLE_WORD', id}\n}\n\nexport function changeFilterMode(filterMode) {\n    return {type: 'CHANGE_FILTER_MODE', filterMode}\n}\n\nexport function setWords() {\n    return dispatch => {\n        axios.get(url).then(res =>\n            {\n                dispatch({type: 'SET_WORDS', words: res.data.words});\n            }\n        );\n    }\n}\n\nexport function toggleWordAsync(id, isMemorized) {\n    return dispatch => {\n        axios.put(url, {id, isMemorized}).then(res => {\n            dispatch({type: 'TOGGLE_WORD', id});\n        })\n    }\n}\n\nexport function removeWordAsync(id) {\n    return dispatch => {\n        axios.delete(url + '/' + id).then(res => {\n            dispatch({type: 'REMOVE_WORD', id});\n        });\n    }\n}\n\nexport function addWordAsync(en, vn) {\n    return dispatch => {\n        axios.post(url, {en, vn}).then(res => {\n           dispatch({type: 'ADD_WORD', word: res.data.w})\n        });\n    }\n}","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport {removeWordAsync, toggleWordAsync} from '../../src/redux/actioncreators';\n\nclass Word extends Component {\n  \n  getButton() {\n    if (this.props.wordInfo.isMemorized) {\n      return <button className=\"btn btn-success\">Forgot</button>\n    } else {\n      return <button className=\"btn btn-danger\">isMemorized</button>\n    }\n  }\n  render() {\n    const {word, toggleWordAsync, removeWordAsync} = this.props;\n    return (\n      <div className=\"word\" key={word._id}>\n          <div className=\"word-container\">\n              <h3 className=\"text-success\">{word.en}</h3>\n              <h3 className=\"text-danger\">\n                  {word.isMemorized ? '----' : word.vn}\n              </h3>\n          </div>\n          <div className=\"btn-container\">\n              <button\n              className={word.isMemorized ? 'btn btn-success' : 'btn btn-danger'}\n              onClick={() => toggleWordAsync(word._id, !word.isMemorized)}>\n              {word.isMemorized ? 'Forgot' : 'Memorized'}\n              </button>\n              <button\n              className=\"btn btn-warning\"\n              onClick={() => removeWordAsync(word._id)}>\n              Remove\n              </button>\n          </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {removeWordAsync, toggleWordAsync}\nexport default connect(null, mapDispatchToProps)(Word);\n","import React, { Component } from 'react'\nimport {connect} from 'react-redux';\nimport * as actioncreators from '../../src/redux/actioncreators'\nimport axios from 'axios'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = ({\n      txtVn: '',\n      txtEn: '',\n    })\n  }\n\n  render() {\n    const { shoudShowForm, toggleForm, addWordAsync } = this.props;\n    if (!shoudShowForm) {\n        return (\n            <button \n                className=\"btn btn-success\" \n                style={{width: 200, margin: 10}}\n                onClick={toggleForm}>\n                +\n            </button>\n        )\n    }\n    return (\n        <div className=\"form-group word-from\" >\n            <input\n                placeholder=\"English\"\n                className=\"form-control\"\n                value={this.state.txtEn}\n                onChange={evt => this.setState({txtEn: evt.target.value})}/>\n            <br />\n            <input\n                placeholder=\"Vietnamese\"\n                className=\"form-control\"\n                value={this.state.txtVn}\n                onChange={evt => this.setState({txtVn: evt.target.value})}/>\n            <br />\n            <div className=\"btn-container\">\n                <button \n                    className=\"btn btn-success\"\n                    disabled={(this.state.txtEn !== '' && this.state.txtVn !== '') ? false : true}\n                    onClick={() => {\n                        addWordAsync(this.state.txtEn, this.state.txtVn);\n                        this.setState({txtEn: '', txtVn: ''})}}>\n                    Add word\n                </button>\n                <button\n                    className=\"btn btn-danger\"\n                    onClick={toggleForm}>\n                    Cancel\n                </button>\n            </div>\n        </div> \n    )\n  }\n}\n\nconst mapStateToProps = stateOnStore => ({shoudShowForm: stateOnStore.shoudShowForm});\nconst mapDispatchToProps = actioncreators\nexport default connect(mapStateToProps, mapDispatchToProps)(Form)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { changeFilterMode } from '../../src/redux/actioncreators'\n\nclass Filter extends Component {\n  render() {\n    const {filterMode, changeFilterMode } = this.props;\n    return (\n        <div>\n            <select\n                value={filterMode}\n                onChange={evt => changeFilterMode(evt.target.value)}\n                className=\"word\">\n                <option value=\"Show_All\">Show All</option>\n                <option value=\"Show_Memorized\">Show Memoried</option>\n                <option value=\"Show_Forgot\">Show Forgot</option>\n            </select>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = stateOnStore => ({filterMode: stateOnStore.filterMode})\nconst mapDispatchToProps = {changeFilterMode}\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\n","import React, { Component } from 'react';\nimport Word from './Word'\nimport Form from './Form';\nimport Filter from './Filter';\nimport {connect} from 'react-redux';\nimport * as actioncreators from '../redux/actioncreators';\n\nclass List extends Component {\n\n    componentWillMount() {\n        this.props.setWords();\n    }\n\n    getFilterMode() {\n        const {filterMode} = this.props;\n        const words = this.props.words;\n        const newWords = words.filter(word => {\n            if (filterMode === \"Show_Forgot\" && word.isMemorized) return false;\n            if (filterMode === \"Show_Memorized\" && !word.isMemorized) return false;\n            return true;\n        })\n        return newWords;\n    }\n\n    render() {\n        return (\n        <div>\n            <Form/>\n            <Filter/>\n            {this.getFilterMode().map(word => \n                <Word word={word} \n                    key={word._id}\n                    onToggleWord={this.onToggleWord} \n                    onRemoveWord={this.onRemoveWord}/>\n            )}\n        </div>\n        )\n    }\n}\n\nconst mapStateToProps = stateOnStore => ({\n    words: stateOnStore.words, \n    shouldShowForm: stateOnStore.shouldShowForm,\n    filterMode: stateOnStore.filterMode,\n});\nexport default connect(mapStateToProps, actioncreators)(List);\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk';\nimport wordsReducer from './words.reducer'\nimport filterModeReducer from './filtermode.reducer'\nimport shouldShowFormReducer from './sholudshowform.reducer'\n\n// const defaultState = {\n//   words: defaultWords,\n//   shoudShowForm: false,\n//   filterMode: 'Show_All',\n//   value: 0\n// }\n\n// function reducer(state = defaultState, action) {\n//   if (action.type === 'INCREASE') return {...state, value: state.value + 1}\n//   if (action.type === 'DECREASE') return {...state, value: state.value - 1}\n//   if (action.type === 'RESET') return {...state, value: 0}\n//   if (action.type === 'ADD_WORD') {\n//     const newWords = [...state.words, action.word];\n//     return {...state, words: newWords}\n//   }\n//   if (action.type === 'TOGGLE_FORM') {\n//     return {...state, shoudShowForm: !state.shoudShowForm};\n//   }\n//   if (action.type === 'TOGGLE_WORD') {\n//     const newWords = state.words.map(word => {\n//     if (word.id !== action.id) {\n//         return word\n//     }\n//     return {...word, isMemorized: !word.isMemorized}\n//     });\n//     return {...state, words: newWords}\n//   }\n//   if (action.type === 'REMOVE_WORD') {\n//     const newWords = state.words.filter(word => word.id !== action.id);\n//     return {...state, words: newWords}\n//   }\n//   if (action.type === 'CHANGE_FILTER_MODE') {\n//     return {...state, filterMode: action.filterMode}\n//   }\n//   return state;\n// }\n\nconst reducer = combineReducers({\n  // state of store _ reducer function\n  words: wordsReducer,\n  filterMode: filterModeReducer,\n  shoudShowForm: shouldShowFormReducer\n})\n\nexport const store = createStore(reducer, applyMiddleware(thunk));","// const defaultWords = [\n//   {id : 'a1' , en : 'One' , vn : 'Mot' , isMemorized : true},\n//   {id : 'a2' , en : 'Two' , vn : 'Hai' , isMemorized : false},\n//   {id : 'a3' , en : 'Three' , vn : 'Ba' , isMemorized : true}\n// ]\n\nexport default function wordsReducer(state = [], action) {\n  // State is words array\n  if (action.type === 'TOGGLE_WORD') {\n    const newWords = state.map(word => {\n      if (word._id !== action.id) {\n        return word\n      }\n      return {...word, isMemorized: !word.isMemorized}\n    });\n    return newWords;\n  }\n  if (action.type === 'REMOVE_WORD') {\n    const newWords = state.filter(word => word._id !== action.id);\n    return newWords;\n  }\n  if (action.type === 'ADD_WORD') {\n    return state.concat(action.word)\n  }\n  if (action.type === 'SET_WORDS') {\n    return action.words\n  }\n  return state;\n}","export default function filterModeReducer(state = 'Show_All', action) {\n  // State is filter mode\n  if (action.type === 'CHANGE_FILTER_MODE') {\n    return action.filterMode;\n  }\n  return state;\n}","export default function shouldShowFormReducer(state = false, action) {\n  // state is should show form\n  if (action.type === 'TOGGLE_FORM') {\n    return !state;\n  }\n  if (action.type === 'ADD_WORD') {\n    return !state;\n  }\n  return state\n}","import React, { Component } from 'react';\nimport List from './components/List';\nimport './App.css';\n// import Filter from './Filter'\n// import Parent from './components/Parent';\n// import Loop from './components/Loop';\n// import Box from './components/Box';\nimport {store} from './redux/store'\nimport {Provider} from 'react-redux'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Provider store={store}>\n            <List/>\n            {/* <Box/> */}\n            {/* <Filter></Filter> */}\n            {/* <Parent></Parent> */}\n          </Provider>\n      </div>\n      \n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}